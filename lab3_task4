#include <iostream>

int greatest_common_divisor(int a, int b)
{
    while (b)
    {
        a %= b;
        std::swap(a, b);
    }
    return a;
}

int main()
{
    int numerator(0), denominator(1);
    std::cout << "Enter the numerator of your fraction:\n";
    std::cin >> numerator;
    std::cout << "Enter the denominator of your fraction:\n";
    std::cin >> denominator;
    while (denominator <= 0)
    {
        std::cout << "Incorrect denominator! Try again:\n";
        std::cin >> denominator;
    }
    int numerator_cpp(numerator), denominator_cpp(denominator), gcd_incpp;
    std::cout << "Your fraction:\n";
    std::cout << numerator << "/" << denominator << std::endl;

    __asm
    {
    mov EAX, numerator
    mov EBX, denominator
    CDQ
    CMP EAX, 0
    JE zero_case

getABS:
   neg EAX
   JS getABS
    mov EBX, denominator
   beg:
       CMP EAX, EBX
       JE end_
          JG greater
          sub EBX, EAX
          JMP beg
       greater:
            sub EAX, EBX
            JMP beg
    end_:
        mov EAX, numerator
        mov ECX, 1
        imul ECX
        idiv EBX
        mov numerator, EAX
        mov EAX, denominator
        mul ECX
        div EBX
        mov denominator, EAX
        JMP end_p
zero_case:
        mov denominator, 1
end_p:
    }

    gcd_incpp = greatest_common_divisor(numerator_cpp, denominator_cpp);
    numerator_cpp /= abs(gcd_incpp);
    denominator_cpp /= abs(gcd_incpp);

    std::cout << "Your reduced fraction in assembler:\n";
    std::cout << numerator << "/" << denominator << std::endl;
    std::cout << "Your reduced fraction in c++:\n";
    std::cout << numerator_cpp << "/" << denominator_cpp << std::endl;

    if(numerator == numerator_cpp && denominator == denominator_cpp)
    {
        std::cout << "Results coincide!" << std::endl;
    }
    else
    {
        std::cout << "Results don\'t coincide!" << std::endl;
    }
    return 0;
}
